# hash table in dictionary

"""
hash 의 인덱스는 이상적으로 비슷하지만 다른 값인 경우에는 상당히 달라야한다.
1.0 과 1.0001 의 해시값은 상당히 다르다.
그러나 1 == 1.0 은 True 이므로 해시값은 동일하다.


dict 에서 Key 를 찾을 때의 알고리즘

1. 키에서 해시를 계산한다.
2. 해시의 일부를 이용해서 해시 테이블 안에 있는 버킷의 위치를 조회한다.
3. 빈 버킷인지 판단.
3-1. 빈 버킷인 경우 KeyError 를 반환
3-2. 키가 동일한지 판단.
3-2-1. 키가 동일하면 버킷 안의 값을 반환
3-2-2. 해시 충돌이 발생하며 해시의 다른 부분을 이용하여 해시 테이블의 다른 위치를 찾는다.
4. 반복

해시 충돌이 일어날 경우 Key 의 순서가 달라질 수 있다.
"""

DIAL_CODES = [
    (86, 'China'),
    (91, 'India'),
    (1, 'United States'),
    (82, 'Korea')
]

d1 = dict(DIAL_CODES)
print(d1)

d2 = dict(sorted(DIAL_CODES))
print(d2)

d3 = dict(sorted(DIAL_CODES, key=lambda x: x[1]))
print(d3)

assert d1 == d2 and d2 == d3

"""
딕셔너리에 새로운 항목을 추가하게 되면 기존 키의 순서가 달라질 수 있다.
따라서 딕셔너리에 항목을 추가하기 위해선 다음 두 단계로 수행한다.

1. 처음부터 끝까지 딕셔너리를 검색하면서 필요한 항목은 별도의 딕셔너리에 추가한다.
2. 별도의 딕셔너리로 원래 딕셔너리를 갱신한다.
"""
